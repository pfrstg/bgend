# Copyright 2019 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     https://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import numpy as np
import unittest

import board
import strategy

import gnubg_interface


class PositionIDTest(unittest.TestCase):
    def test_from_string(self):
        config = board.GameConfiguration(15, 6)
        # index 1
        self.assertEqual(board.Board(config, [14, 1, 0, 0, 0, 0, 0]),
                         gnubg_interface.position_id_string_to_board(
                             config, 'AQAAAAAAAAAAAA'))
        # index 2
        self.assertEqual(board.Board(config, [14, 0, 1, 0, 0, 0, 0]),
                         gnubg_interface.position_id_string_to_board(
                             config, 'AgAAAAAAAAAAAA'))
        # index 99
        self.assertEqual(board.Board(config, [11, 2, 0, 0, 2, 0, 0]),
                         gnubg_interface.position_id_string_to_board(
                             config, 'YwAAAAAAAAAAAA'))
        # index 33333
        self.assertEqual(board.Board(config, [1, 1, 11, 0, 0, 1, 1]),
                         gnubg_interface.position_id_string_to_board(
                             config, '/R8FAAAAAAAAAA'))
        # index 50000 (everything is on the board)
        self.assertEqual(board.Board(config, [0, 1, 0, 3, 8, 3, 0]),
                         gnubg_interface.position_id_string_to_board(
                             config, 'uX8HAAAAAAAAAA'))


class ParseTest(unittest.TestCase):
    def testParse(self):
        input = """
Bearoff database: gnubg_os0.bd
Position number : 30

Information about database:

 * On disk 1-sided bearoff database evaluator
   - generated by GNU Backgammon
   - up to 15 chequers on 6 points (54264 positions) per player
   - database includes gammon distributions



Dump of position#: 30

 GNU Backgammon  Position ID: EwAAAAAAAAAAAA
 +13-14-15-16-17-18------19-20-21-22-23-24-+
 |                  |   |          O     O | OOO
 |                  |   |                O | OOO
 |                  |   |                  | OO
 |                  |   |                  | OO
 |                  |   |                  | OO
v|                  |BAR|                  |
 |                  |   |                  | XXX
 |                  |   |                  | XXX
 |                  |   |                  | XXX
 |                  |   |                  | XXX
 |                  |   |                  | XXX
 +12-11-10--9--8--7-------6--5--4--3--2--1-+

             Player       Opponent
Position            0            30

Bearing off                             Bearing at least one chequer off
Rolls   Player  Opponent        Player  Opponent
    0   100.000   0.000         100.000 100.000
    1     0.000  13.889           0.000   0.000
    2     0.000  86.111
Average rolls
Bearing off                             Saving gammon
        Player  Opponent        Player  Opponent
Mean      0.000   1.861           0.000   0.000
Std dev   0.000   0.346           0.000   0.000

Effective pip count:
        Player  Opponent
EPC       0.000  15.199
Wastage   0.000  10.199

EPC = 8.167 * Average rolls
Wastage = EPC - pips
        """        
        config = board.GameConfiguration(15, 6)
        b, mcd = gnubg_interface.parse_gnubg_dump(config, input)

        expected_b = board.Board(config, [12, 2, 0, 1, 0, 0, 0])
        self.assertEqual(b, expected_b,
                        msg='expected={}, got={}'.format(expected_b, b))
        
        expected_mcd = strategy.MoveCountDistribution(
            [0.0, .13889, .86111])
        np.testing.assert_allclose(expected_mcd.dist, mcd.dist, atol=1e-5)
        

if __name__ == '__main__':
    unittest.main()
